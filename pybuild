#!/usr/bin/env python3
# a simple build system
import sys
import os

# constants #
START_MAKEFILE = """include common.mk
"""
USAGE_STRING = """Usage: {0} [options]

Options:
    -help                    Display this help message
    -arg <argument[=value]>  Pass an argument to the modules; Examples (not actual valid arguments for most software):
                               build-on-host, target-override=x86_64-linux-gnu

Builtin Arguments:
    mk-outdir=<directory>    Set the output directory for the generated Makefiles"""

# functions for use by modules #
mod_args = [] # arguments specified by -arg #

def get_args():
    return mod_args

def get_arg(name):
    for arg in mod_args:
        if type(arg) in (tuple, list) and len(arg) >= 2:
            if arg[0] == name:
                return arg[1]
        elif arg == name:
            return True
    return None

mod_imps = [] # module imports #

# proxy exception #
class PBError(Exception):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

def next_alt(it):
    try:
        return next(it)
    except StopIteration:
        raise PBError()

# argument parser #
class ArgumentParser:
    HELP = 0x1 # display help #
    ARG = 0x2 # module argument #

    def __init__(self, argv):
        self.argv = argv

    # print usage #
    def print_usage(self):
        print(USAGE_STRING.format(self.argv[0]))

    # parse arguments #
    def parse(self):
        flags = 0

        it = iter(self.argv[1:])
        arg = None
        try:
            while True:
                arg = next(it)

                if arg[0] == '-':
                    if arg == '-help':
                        self.print_usage()
                        flags |= ArgumentParser.HELP

                    elif arg == '-arg':
                        val = next_alt(it)
                        if '=' in val:
                            mod_args.append(val.split('='))
                        else:
                            mod_args.append(val)

                    else:
                        print(f'Unrecognized option: \'{arg}\'')
                        self.print_usage()
                        flags |= ArgumentParser.HELP

        except StopIteration:
            pass
        except PBError:
            print(f'Expected argument after \'{arg}\'')
            self.print_usage()
            flags |= ArgumentParser.HELP

        return flags

# target object #
class TargetObject:
    __slots__ = (
            'name',
            'flags',
            'out',
            'srcdir',
            'objdir',
            'depsdir',
            'cflags',
            'asmflags',
            'ldflags',
            'cfiles',
            'asmfiles',
            'extrac',
            'extraasm',
            'extrald',
            )

    def __init__(self, module, target):
        self.name = target.get('name', '')
        self.flags = module.flags + target.get('flags', ())
        self.out = target.get('out', '')
        self.srcdir = target.get('srcdir', module.srcdir)
        self.objdir = target.get('objdir', module.objdir)
        self.depsdir = target.get('depsdir', module.depsdir)
        self.cflags = module.cflags + target.get('cflags', '')
        self.asmflags = module.asmflags + target.get('asmflags', '')
        self.ldflags = module.ldflags + target.get('ldflags', '')
        self.cfiles = target.get('c-files', ())
        self.asmfiles = target.get('asm-files', ())
        self.extrac = module.extrac + target.get('extra-c', ())
        self.extraasm = module.extraasm + target.get('extra-asm', ())
        self.extrald = module.extrald + target.get('extra-ld', ())

# module object #
class ModuleObject:
    __slots__ = (
            'name',
            'targets',
            'flags',
            'srcdir',
            'objdir',
            'depsdir',
            'cflags',
            'asmflags',
            'ldflags',
            'extrac',
            'extraasm',
            'extrald',
            )

    def __init__(self, module):
        self.name = module.get('name', '')
        self.targets = module.get('targets', ())
        self.flags = module.get('flags', ())
        self.srcdir = module.get('srcdir', '')
        self.objdir = module.get('objdir', '')
        self.depsdir = module.get('depsdir', '')
        self.cflags = module.get('cflags', '')
        self.asmflags = module.get('asmflags', '')
        self.ldflags = module.get('ldflags', '')
        self.extrac = module.get('extra-c', ())
        self.extraasm = module.get('extra-asm', ())
        self.extrald = module.get('extra-ld', ())

        self.targets = tuple(TargetObject(self, target) for target in self.targets)

# makefile generator #
class MakefileGenerator:
    def __init__(self, modules, flags=None):
        self.modules = []
        self.string = None
        self.dep = False # generate dependency makefiles #

        main = sys.modules[__name__]
        for module in modules:
            module.pybuild = main
            self.modules.append(module.module())

    # generate all associated makefiles #
    def generate_all(self):
        for mod in self.modules:
            self.generate(mod)

    # generate associated makefile #
    def generate(self, mod):
        outdir = get_arg('mk-outdir') or '.'
        makefile_fname = f'{outdir}/{mod["name"]}.mk'
        print(f'Generating {makefile_fname}...')

        self.string = START_MAKEFILE

        modobj = ModuleObject(mod)

        # add constants #
        for target in modobj.targets:
            self.add_constants(target)

        # add target list #
        self.string += '\nall:'
        for target in modobj.targets:
            self.string += ' ' + target.out

        # targets #
        for target in modobj.targets:
            self.add_target(target)

        # save file #
        self.string += '\n'
        with open(makefile_fname, 'w') as fp:
            fp.write(self.string)
        self.string = None

    # add constants #
    def add_constants(self, target):
        nolink = 'NO_LINK' in target.flags

        name = target.name.upper()
        objdir = target.objdir

        # cflags #
        self.string += f'\n{name}_CFLAGS=-c {target.cflags}'

        # asmflags #
        self.string += f'\n{name}_ASMFLAGS={target.asmflags}'

        if not nolink:
            # ldflags #
            self.string += f'\n{name}_LDFLAGS={target.ldflags}'

            # objfiles #
            self.string += f'\n{name}_OBJFILES='
            self.add_objfiles(objdir, target.cfiles)
            self.add_objfiles(objdir, target.asmfiles)
            self.string += '\n'

    # add object files #
    def add_objfiles(self, objdir, files):
        for src in files:
            fname = src[0] if isinstance(src, tuple) else src
            self.string += os.path.join(objdir, os.path.splitext(os.path.basename(fname))[0] + '.o ')

    # add target #
    def add_target(self, target):
        nolink = 'NO_LINK' in target.flags
        hostcc = 'HOST_CC' in target.flags
        buildar = 'BUILD_AR' in target.flags

        name = target.name.upper()
        out = target.out

        if not nolink:
            self.string += f'\n\n{out}: $({name}_OBJFILES)\n\t$(DST_FILENAME)\n\t'

            if not buildar:
                linker = ('HOST_CC' if hostcc else 'LD')
                self.string += f'@$({linker}) -o {out} $({name}_OBJFILES) $({name}_LDFLAGS)'

            else:
                archiver = ('HOST_AR' if hostcc else 'AR')
                self.string += f'@$({archiver}) r {out} $({name}_OBJFILES)'

            for cmd in target.extrald:
                self.string += f'\n\t@{cmd}'

        # add source rules #
        self.add_source_rules(target, target.cfiles)
        self.add_source_rules(target, target.asmfiles, ext='asm')

    # add source rules #
    def add_source_rules(self, target, files, ext='c'):
        nolink = 'NO_LINK' in target.flags
        hostcc = 'HOST_CC' in target.flags

        comp='ASM' if ext == 'asm' else 'HOST_CC' if hostcc else 'CC'
        flags='ASMFLAGS' if ext == 'asm' else 'CFLAGS'
        name = target.name.upper()
        srcdir = target.srcdir
        objdir = target.objdir
        depsdir = target.depsdir

        for src in files:
            fname = src[0] if isinstance(src, tuple) else src
            deps = src[1:] if isinstance(src, tuple) else None
            objfile = os.path.splitext(os.path.basename(fname))[0] + '.o'

            fname = os.path.join(srcdir, fname)
            objfile = os.path.join(objdir, objfile)

            if nolink: objfile = target.out

            self.string += f'\n\n{objfile}: {fname}'
            if deps:
                for dep in deps:
                    self.string += ' ' + os.path.join(depsdir, dep)

            self.string += f'\n\t$(SRC_FILENAME)\n\t@$({comp}) $({name}_{flags}) -o {objfile} {fname}'

            for cmd in (target.extraasm if ext == 'asm' else target.extrac):
                self.string += f'\n\t@{cmd}'

# main #
def main():
    from modules import modules
    for name in modules:
        mod_imps.append(__import__(name))

    # parse arguments #
    argparse = ArgumentParser(sys.argv)
    flags = argparse.parse()

    if flags & ArgumentParser.HELP:
        for mod in mod_imps:
            if hasattr(mod, 'print_help'):
                print()
                mod.print_help()
        return

    # generate makefiles #
    makegen = MakefileGenerator(mod_imps, flags)
    makegen.generate_all()

if __name__ == '__main__':
    main()
